jws.jwsPlugin = {
    // if namespace is changed update server plug-in accordingly!
    NS: "com.sdc.jWebSocket.myPlugin",

	//Method is called when a token has to be progressed
    processToken: function( aToken ) {
        if(aToken.ns == jws.jwsPlugin.NS && (aToken.type == "cashier" && aToken.flag == "refreshkitchen" && aToken.message == "True") || (aToken.type == "kitchen" && aToken.flag == "finished")) {
			var reload_link = "";
			if(sessionStorage.sort_type == 1){
				reload_link = "php/container.php?index="+sessionStorage.curIndex;
			}else{
				reload_link = "php/sortByFood.php";
			}
		
		    $.ajax({
					type: 'POST',
					url: reload_link,
					data: null,
					success: function(result)
					{
						$('#container').html(result);
					},
					error: {
					}
				}); 
		}else if(aToken.ns == jws.jwsPlugin.NS && (aToken.type == "kitchen" && aToken.flag == "toggle")){
			$.ajax({
				type: 'POST',
				url: "php/contentRight.php?bill_id="+aToken.bill_id+"&food_id="+aToken.food_id+"&status="+aToken.status+"&index="+sessionStorage.curIndex,
				data: null,
				success: function(result)
				{
					$('#contentRight').html(result);
				},
				error: {
				}
			});
		}
    },
	
	onToggled: function(bill_id, food_id, status, index , aOptions ) {
		if( this.isConnected() ) {
			//create the request token
			var lToken = {
				ns: "com.sdc.jWebSocket.myPlugin",
				type: "kitchen",
				flag: "toggle",
				bill_id: bill_id,
				food_id: food_id,
				status: status,
				index: index
			};
		  this.sendToken( lToken,  aOptions );//send it
		}
	},
	
	onFinished: function(userId, message, tableId , aOptions ) {
		if( this.isConnected() ) {
			//create the request token
			var lToken = {
				ns: "com.sdc.jWebSocket.myPlugin",
				type: "kitchen",
				flag: "finished",
				userId: userId,
				tableId: tableId,
				message: message
			};
		  console.log("sending request for:"+message);
		  this.sendToken( lToken,  aOptions );//send it
		}
	}
}
//add the client PlugIn
jws.oop.addPlugIn( jws.jWebSocketTokenClient, jws.jwsPlugin );